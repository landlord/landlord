#!/usr/bin/env bash

set -e

# Builds the CLI and daemon and runs a small integration test, testing connectivity
# over TCP and Unix Domain Sockets.

DIR=/tmp/landlord-test

cleanup() {
    rm -rf "$DIR"
}

trap cleanup EXIT

# Normalize dirs
SCRIPT_NAME="${BASH_SOURCE[0]}"
if [ -h "$SCRIPT_NAME" ]; then
    SCRIPT_NAME="$(readlink "$SCRIPT_NAME")"
fi
ROOT_DIR="$(cd "$(dirname "$SCRIPT_NAME")" && cd .. && pwd)"
cd "$ROOT_DIR"

# Build projects
(cd landlordd && sbt clean compile "project daemon" "set Test / Keys.test := {}" stage) &
(cd landlord && cargo clean && cargo build --release) &
wait

# Start landlordd
rm -rf "$DIR"
mkdir -p "$DIR"
landlordd/daemon/target/universal/stage/bin/landlordd --host "unix://$DIR/landlordd.sock" --host "tcp://127.0.0.1:2376" &
LANDLORDD_PID="$!"

# Test landlord -wait parameter by starting before landlordd is given time to start
OUTPUT1=$(echo Testing | ./landlord/target/release/landlord -ready landlordd -wait -Dgreeting='hello world' -H "unix://$DIR/landlordd.sock" -cp landlordd/test/target/scala-2.12/classes example.Hello)

# Run a program that uses stdin and properties
OUTPUT2=$(echo Testing | ./landlord/target/release/landlord -Dgreeting='hello world' -H "unix://$DIR/landlordd.sock" -cp landlordd/test/target/scala-2.12/classes example.Hello)
# Run the same program again, but this time over TCP
OUTPUT3=$(echo Testing | ./landlord/target/release/landlord -Dgreeting='hello world' -H "tcp://127.0.0.1:2376" -cp landlordd/test/target/scala-2.12/classes example.Hello)

# Shutdown landlordd
kill "$LANDLORDD_PID"
wait

# Test that we got what we expected
EXPECTED='hello world
Testing
Good Bye!'

[ "$OUTPUT1" = "$EXPECTED" ] && [ "$OUTPUT2" = "$EXPECTED" ] && [ "$OUTPUT3" = "$EXPECTED" ]
